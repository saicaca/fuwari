---
import BackToTop from "@components/control/BackToTop.astro";
import Footer from "@components/Footer.astro";
import Navbar from "@components/Navbar.astro";
import SideBar from "@components/widget/SideBar.astro";
import { Icon } from "astro-icon/components";
import ImageWrapper from "../components/misc/ImageWrapper.astro";
import TOC from "../components/widget/TOC.astro";
import { siteConfig } from "../config";
import {
  BANNER_HEIGHT,
  BANNER_HEIGHT_EXTEND,
  MAIN_PANEL_OVERLAPS_BANNER_HEIGHT,
} from "../constants/constants";
import type { Heading } from "../types/heading";
import Layout from "./Layout.astro";

interface Props {
  title?: string;
  banner?: string;
  description?: string;
  lang?: string;
  setOGTypeArticle?: boolean;
  headings?: Heading[];
}

const { title, banner, description, lang, setOGTypeArticle, headings = [] } = Astro.props;
const hasBannerCredit = siteConfig.banner.enable && siteConfig.banner.credit.enable;
const hasBannerLink = !!siteConfig.banner.credit.url;

const mainPanelTop = siteConfig.banner.enable
  ? `calc(${BANNER_HEIGHT}vh - ${MAIN_PANEL_OVERLAPS_BANNER_HEIGHT}rem)`
  : "5.5rem";
---

<Layout title={title} banner={banner} description={description} lang={lang} setOGTypeArticle={setOGTypeArticle}>

<!-- Navbar -->
<slot slot="head" name="head"></slot>
<div id="top-row" class="z-50 pointer-events-none relative transition-all duration-700 max-w-[var(--page-width)] px-0 md:px-4 mx-auto" class:list={[""]}>
    <div id="navbar-wrapper" class="pointer-events-auto sticky top-0 transition-all">
        <Navbar></Navbar>
    </div>
</div>

<!-- Banner -->
{siteConfig.banner.enable && <div id="banner-wrapper" class={`absolute z-10 w-full transition duration-700 overflow-hidden`} style={`top: -${BANNER_HEIGHT_EXTEND}vh`}>
    <ImageWrapper id="banner" alt="Banner image of the blog" class:list={["object-cover h-full transition duration-700 opacity-0 scale-105"]}
                  src={siteConfig.banner.src} position={siteConfig.banner.position}
    >
    </ImageWrapper>
</div>}

<!-- Main content -->
<div class="absolute w-full z-30 pointer-events-none" style={`top: ${mainPanelTop}`}>
    <!-- The pointer-events-none here prevent blocking the click event of the TOC -->
    <div class="relative max-w-[var(--page-width)] mx-auto pointer-events-auto">
        <div id="main-grid" class="transition duration-700 w-full left-0 right-0 grid grid-cols-[17.5rem_auto] grid-rows-[auto_1fr_auto] lg:grid-rows-[auto]
    mx-auto gap-4 px-0 md:px-4"
        >
            <!-- Banner image credit -->
            {hasBannerCredit && <a href={siteConfig.banner.credit.url} id="banner-credit" target="_blank" rel="noopener" aria-label="Visit image source"
                                   class:list={["group onload-animation transition-all absolute flex justify-center items-center rounded-full " +
                                   "px-3 right-4 -top-[3.25rem] bg-black/60 hover:bg-black/70 h-9", {"hover:pr-9 active:bg-black/80": hasBannerLink}]}
            >
                <Icon class="text-white/75 icon-md mr-1" name="material-symbols:copyright-outline-rounded" ></Icon>
                <div class="text-white/75 text-xs">{siteConfig.banner.credit.text}</div>
                <Icon class:list={["transition absolute text-[var(--primary)] right-4 text-[0.75rem] opacity-0",
                    {"group-hover:opacity-100": hasBannerLink}]}
                      name="fa6-solid:arrow-up-right-from-square">
                </Icon>
            </a>}


            <SideBar class="mb-4 row-start-2 row-end-3 col-span-2 lg:row-start-1 lg:row-end-2 lg:col-span-1 lg:max-w-[17.5rem] onload-animation" headings={headings}></SideBar>

            <main id="swup-container" class="transition-swup-fade col-span-2 lg:col-span-1 overflow-hidden">
                <div id="content-wrapper" class="onload-animation">
                    <!-- the overflow-hidden here prevent long text break the layout-->
                    <!-- make id different from windows.swup global property -->
                    <slot></slot>
                    <div class="footer col-span-2 onload-animation hidden lg:block">
                        <Footer></Footer>
                    </div>
                </div>
            </main>

            <div class="footer col-span-2 onload-animation block lg:hidden">
                <Footer></Footer>
            </div>
        </div>

        <BackToTop></BackToTop>
    </div>
</div>

<!-- The things that should be under the banner, only the TOC for now -->
<div class="absolute w-full z-0 hidden 2xl:block">
    <div class="relative max-w-[var(--page-width)] mx-auto">
        <!-- TOC component -->
        {siteConfig.toc.enable && <div id="toc-wrapper" class:list={["hidden lg:block transition absolute top-0 -right-[var(--toc-width)] w-[var(--toc-width)] items-center",
            {"toc-hide": siteConfig.banner.enable}]}
        >
            <div id="toc-inner-wrapper" class="fixed top-14 w-[var(--toc-width)] h-[calc(100vh_-_20rem)] overflow-y-scroll overflow-x-hidden hide-scrollbar">
                <div id="toc" class="w-full h-full transition-swup-fade ">
                    <div class="h-8 w-full"></div>
                    <TOC headings={headings}></TOC>
                    <div class="h-8 w-full"></div>
                </div>
            </div>
        </div>}

        <!-- #toc needs to exist for Swup to work normally -->
        {!siteConfig.toc.enable && <div id="toc"></div>}
</div>
</div>

<script is:inline define:vars={{ TOC_MAX_LEVEL: siteConfig.toc.depth }}>
// Fallback TOC for Typst HTML pages: build anchors client-side and re-init scroll spy
(function(){
  function buildTocFromDom(){
    var tocRoot = document.querySelector('#toc table-of-contents');
    if (!tocRoot) return;
    if (tocRoot.querySelector('a')) return; // already rendered by SSR
    var scope = document.querySelector('.typst-content') || document;
    var nodes = Array.prototype.slice.call(scope.querySelectorAll('h1, h2, h3'));
    if (!nodes.length) return;
    var depths = nodes.map(function(n){ return parseInt(n.tagName.substring(1)) || 0; }).filter(function(d){ return d>0; });
    if (!depths.length) return;
    var min = Math.min.apply(null, depths);
    var MAX_LEVEL = TOC_MAX_LEVEL;
    var h1Count = 1;
    var frag = document.createDocumentFragment();
    for (var i=0;i<nodes.length;i++){
      var n = nodes[i];
      var depth = parseInt(n.tagName.substring(1));
      if (!(depth < min + MAX_LEVEL)) continue;
      var text = (n.textContent || '').trim();
      if (!text) continue;
      if (!n.id){ var gen = text.toLowerCase().trim().replace(/\s+/g,'-'); if (!gen) continue; n.id = gen; }
      var a = document.createElement('a');
      a.setAttribute('href','#'+encodeURIComponent(n.id));
      a.setAttribute('class','toc-entry');
      var b = document.createElement('div');
      b.setAttribute('class','toc-badge');
      if (depth===min){ b.classList.add('bg-[var(--toc-badge-bg)]'); b.classList.add('text-[var(--btn-content)]'); b.textContent=String(h1Count++); }
      else if (depth===min+1){ b.classList.add('ml-4'); var d1=document.createElement('div'); d1.setAttribute('class','toc-dot'); b.appendChild(d1); }
      else if (depth===min+2){ b.classList.add('ml-8'); var d2=document.createElement('div'); d2.setAttribute('class','toc-subdot'); b.appendChild(d2); }
      var lbl=document.createElement('div');
      lbl.setAttribute('class','transition text-sm');
      if (depth===min || depth===min+1) lbl.classList.add('text-50');
      if (depth===min+2) lbl.classList.add('text-30');
      lbl.textContent = text.replace(/#+$/,'').trim();
      a.appendChild(b); a.appendChild(lbl); frag.appendChild(a);
    }
    var indicator=document.getElementById('active-indicator');
    tocRoot.insertBefore(frag, indicator||null);
    var el=document.querySelector('table-of-contents');
    try{ el && typeof el.init==='function' && el.init(); }catch(_){ }
  }
  var prose=document.querySelector('.prose');
  if (prose){ prose.addEventListener('animationend', function(){ buildTocFromDom(); }, { once:true }); }
  else { if (document.readyState==='loading'){ document.addEventListener('DOMContentLoaded', buildTocFromDom, { once:true }); } else { buildTocFromDom(); } }
})();
</script>

</Layout>
